#! /usr/bin/env ruby
# THIS IS A CANVAS... 

require 'google/apis/calendar_v3'
require 'googleauth'
require 'googleauth/stores/file_token_store'
require 'fileutils'

# helpers
def write_to_yaml(path, hash)
    File.open(path, "w") do |file|
       file.write(hash.to_yaml) 
    end
end

def date_string datetime
    datetime.strftime("%A, %B %e %H:%M") rescue nil
end


###########
# What are the classes that we're going to need.
###### classes
# Account - for keeping track of login, creds... etc, and preferences.
# Action - make some call to the calendar API

###########
# What are some of the flags/commands we want to be able to execute?
# mcal -t => get my events for today.
# mcal -tr => get my tracking for today
# mcal -a => add an event
# mcal -r => get events we need to respond to 
# mcal -u james@ekta.co => get all events that include james
# mcal -o james@ekta.co => get all events that are owned by james.

class Account

    attr_accessor :name, :current_token, :service, :argvs
       
    YAML_PATH = "config.yml"
    # constants 
    OOB_URI = 'urn:ietf:wg:oauth:2.0:oob'.freeze
    APPLICATION_NAME = 'Google Calendar CLI'.freeze
    CREDENTIALS_PATH = 'creds.json'.freeze
    TOKEN_PATH = 'token.yaml'.freeze
    # I think we always want this scope.
    SCOPE = Google::Apis::CalendarV3::AUTH_CALENDAR_EVENTS

    # on init, we want to check the config.yml and see if there's a default alias/account.
    # if so, we want to use that account as the path for the creds.
    # if not, we want to run the new alias/account creation
    def initialize
        # what needs to be defined here to allow for two different accounts to be used?
        # @token_path = "test" # creds.token_path + "-token.yaml".freeze || ""
        service = Google::Apis::CalendarV3::CalendarService.new
        service.client_options.application_name = APPLICATION_NAME
        @argvs = ARGV
        set_token
        add_account if !set_token
        service.authorization = authorize

        @service = service
        run_flag

    end 

    def run_flag
        puts "we run"
        show_today if @argvs[0] == "-t"
        get_responses_needed if @argvs[0] == "-r"
        add_event if @argvs[0] == "-a"
    end

    def get_responses_needed
        events = @service.list_events("primary", max_results: 400, time_min: Time.now.iso8601)
        cool = events.items.select do |e|
                e.attendees && e.attendees.any? do |a|
                        a.email == 'mark@ekta.co' &&
                        a.response_status == "needsAction"
                end
        end

        print_summary = -> (a,i) { puts "#{i} - #{a.summary} - #{date_string(a.start.date_time)}" }
        puts "Events that need your response"
        cool.each.with_index { |a,i| print_summary[a,i] }

        get_exit
    end


    def get_exit
        puts "press q to exit, number to go to the event"
        input = $stdin.gets.chomp
        return if input == "q"
        get_exit
    end

    def show_today
       now = DateTime.now
       time_max = DateTime.new(now.year, now.month, now.day, 11, 59, 59, now.zone)
       response = @service.list_events("primary",
                               max_results: 250,
                               single_events: true,
                               order_by: 'startTime',
                               time_max: time_max.iso8601,
                               time_min: now.iso8601)
puts 'Upcoming events:'
puts 'No upcoming events today' if response.items.empty?

response.items.each do |event|
  start = event.start.date || event.start.date_time
  puts "----------"
  puts "attachments #{event.attachments}"
  puts "attendees #{event.attendees}"
  puts "conference info #{event.conference_data}"
  puts "creator #{event.creator}"
  puts "description: #{event.description}"
  puts "etag #{event.etag}"
  puts "extended properties #{event.extended_properties}"
  puts "gadget #{event.gadget}"
  puts "hangout #{event.hangout_link}"
  puts "html #{event.html_link}"

  puts "- #{event.summary} (#{start})"
  puts event.status
  # puts event.transparency.class
  # puts event.visibility.class
end

    end

    private 

    def add_account
        puts "There are no accounts saved"
        puts "What is the alias of the account?"
        account_alias = gets.chomp
        set_default(account_alias)
    end

    def set_token
        # check the yaml, see what the default is.
        config_yaml =  YAML.load_file(YAML_PATH)
        @current_token = config_yaml["default"]
    end 

    def set_default(account_alias)
        # load config yaml 
        config_yaml = YAML.load_file(YAML_PATH)
        config_yaml["default"] = account_alias
        
        @current_token = account_alias
        write_to_yaml(YAML_PATH, config_yaml)
    end

        def authorize
                client_id = Google::Auth::ClientId.from_file(CREDENTIALS_PATH)
                token_store = Google::Auth::Stores::FileTokenStore.new(file: "#{@current_token}.yaml")
                authorizer = Google::Auth::UserAuthorizer.new(client_id, SCOPE, token_store)
                user_id = 'default'
                credentials = authorizer.get_credentials(user_id)
          if credentials.nil?
            url = authorizer.get_authorization_url(base_url: OOB_URI)
            puts 'Open the following URL in the browser and enter the ' \
                 "resulting code after authorization:\n" + url
            code = $stdin.gets
            credentials = authorizer.get_and_store_credentials_from_code(
              user_id: user_id, code: code, base_url: OOB_URI
            )
          end
          credentials
        end

        def create_event start_time, end_time, activity
                Google::Apis::CalendarV3::Event.new(
                        summary: activity,
                        start: {
                                date_time: start_time
                        },
                        end: {
                                date_time: end_time
                        })
        end

        def add_event
                start_time = get_start_time
                end_time = get_end_time
                activity = get_activity
                event = create_event(start_time, end_time, activity)
                @service.insert_event('primary', event)
        end

        def format_input_time input
                now = DateTime.now
                DateTime.new(now.year, now.month, now.day, input[0].to_i, input[1].to_i, 0, -5)
        end

        def get_activity
                puts "enter activity"
                $stdin.gets.chomp
        end

        def get_start_time
                puts "Enter start time"
                input = $stdin.gets.chomp 
                input = input.split(" ")
                return DateTime.now if input == ""
                format_input_time(input)
        end

        def get_end_time
                puts "Enter end time"
                input = $stdin.gets.chomp
                input = input.split(" ")
                return DateTime.now if input.length < 2
                format_input_time input
        end

    
end

cool = Account.new
